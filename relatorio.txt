# Relatorio De Implementação de Instruções no MIPS
Integrantes:
Augusto Dalcin Peiter
Gustavo Acauan Lorentz
Mateus Davi Simon
Pedro Weber Mendonça


# SRLV

## Monociclo

Para implementar a instrução SRLV tanto no Monociclo bastou adicionar a
funcionalidade de fazer shift right lógico na ALU obedecendo o comando 
correto passado pelo campo funct.
Nenhum sinal de controle adicional foi necessário pois a
instrução utiliza o mesmo opcode que as outras funções do tipo R (como add,
sub, etc)

## Multiciclo

As mesmas alterações feitas no Monociclo foram necessárias. Nenhum estado novo
no bloco de controle foi necessário pois as mesmas das instruções do tipo R
podem ser utilizadas.

## Pipeline

Novamente, somente as mesmas alteraçoes feitas na ALU do monociclo foram 
necessárias.


# ANDI

## Monociclo

No monociclo foi necessário modificar o circuito ALUcontrol para permitir que 
ele forçasse um and na ALU, foi utilizado o código 11 para fazer isso já que
este não era usado previamente. A ALU já possuia a operação de and então não
foi necessário modifica-la. Por fim foi adicionado no bloco de controle os
sinais correspondentes ao opcode da instrução ADDI: AluOp com o código 11, como
explicado acima; AluSrc em 1 para selecionar o valor imediato como segundo
operando na ALU; RegWrite em 1 para salvar o valor no registrador; e RegDst em
0 para salvar o valor do registrator em Rt. Os demais sinais foram mantidos em
zero.

## Multiciclo

No multiciclo além da alteração feita no Monociclo para forçar o ANDI na
AluControl, foram criados dois novos estados no bloco de controle para
realizar a instrução ANDI.
1 - Ciclo de execução do ANDI: ALUop em 11 para forçar o andi na ALU; ALUSrcB
com 10 para selecionar o valor imediato como segundo operando da ALU; AluSrcA em 
1 para selecionar o registrador em Rs como primeiro operando da ALU. Os demais
sinais de controle são mantidos em 0.
2 - Ciclo de escrita do resultado em registrador: RegWrite é setado em 1 e
RegDst mantido em zero para selecionar Rt como destino da escrita. Os demais
sinais ficam em zero.
A execução do ANDI tem 4 ciclos, os dois primeiros são o ciclo de busca de
decodificação comum a todas as instruções, então segue o ciclo (1) e (2)
acima.


## Pipeline

Bastou as mesmas modificações feitas no Monociclo. Os sinais de controle
também foram os mesmos


# BLTZ

## Monociclo

Para a instrução BLTZ ser implementada no Monociclo, o grupo introduziu um
novo sinal de controle, chamado REGIMM. Este bit de controle deve ser ligado
apenas quando o OPCODE de uma instrução for do tipo REGIMM. A instrução faz
branch caso o rs tenha valor negativo. Para que funcionasse, o grupo
introduziu uma AND-2 entre o bit de controle novo e o bit mais significativo
do rs, assim, quando for instrução do tipo REGIMM E rs for negativo, deve
fazer branch. Para que haja branches normais e branches de tipo REGIMM,
precisa existir uma OR entre esses dois casos, ou seja, (Branch AND Zero) OR
(REGIMM AND rs_negativo).

## Multiciclo

No multiciclo o BLTZ tem 3 ciclos, os dois primeiros são os mesmos comuns a
todas as instruções. O Terceiro ciclo é um novo ciclo que tem um sinal novo
criado só para ele e que é feito um and dele com o bit mais significativo (de
sinal) do valor em Rs, o resultado desse and determina se será feito o branch
ou não.

## Pipeline

No pipeline, assim como no multiciclo e no monociclo, foi criado um sinal de
controle extra que combinado com o bit mais significativo em Rs determina um
branch.


# JR

## Monociclo

A dificuldade do JR é a utilização do Mesmo Opcode que operações aritiméticas
do tipo R já implementadas. Para possibilitar a detecção do JR os 6 bits do
campo funct também são passados para o bloco de controle que agora, quando
detecta que a instrução é um JR, envia os sinais de controles apropiados, caso
contrario envia os valores como eram antes. Como a definição da instrução JR
obriga o uso do registrador $0 em Rt, para implementá-lo força se uma soma entre
Rs e Rt, produzindo Rs, o endereço a ser pulado que então é selecionado em um
mux cujo sinal de controle é criado. 

## Multiciclo

No multiciclo, para poder utilizar o JR sem comprometer as outras instruções
que tem o mesmo opcode, utiliza-se o campo funct para verificar se a instrução
é JR, em caso positivo "traduz" o opcode para um outro valor não utilizado,
assim é possível usar as mesmas tabelas de próximo estado e de sinais.
Apenas um estado é criado para implementar o JR, assim o JR completa em 3
ciclos. Este novo estado passa PCwrite como true, forçando uma escrita do PC;
e 11 no PCSource, este valor seleciona o valor de Rs no mux que seleciona o
endereço a ser escrito no PC (11 não era usado previamente)

## Pipeline

No pipeline foi utilizada a mesma etratégia feita no Monociclo, mas adequado
para o Pipeline.

